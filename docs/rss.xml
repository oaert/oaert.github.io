<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Oaert Page</title><link>https://oaert.github.io</link><description>Why You Try</description><copyright>Oaert Page</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://img.picui.cn/free/2024/06/20/6673d27508749.png</url><title>avatar</title><link>https://oaert.github.io</link></image><lastBuildDate>Thu, 20 Jun 2024 08:12:31 +0000</lastBuildDate><managingEditor>Oaert Page</managingEditor><ttl>60</ttl><webMaster>Oaert Page</webMaster><item><title>Go 单元测试</title><link>https://oaert.github.io/post/Go%20-dan-yuan-ce-shi.html</link><description>### go 单元测试gin框架mock请求&#13;
[mock请求学习](https://stackoverflow.com/questions/57733801/how-to-set-mock-gin-context-for-bindjson/67034058#67034058)&#13;
&#13;
#### 示例代码&#13;
```go&#13;
func MockJsonPost(c *gin.Context /* the test context */, content interface{}) {&#13;
    c.Request.Method = 'POST' // or PUT&#13;
    c.Request.Header.Set('Content-Type', 'application/json')&#13;
&#13;
    jsonbytes, err := json.Marshal(content)&#13;
    if err != nil {&#13;
        panic(err)&#13;
    }&#13;
    &#13;
    // the request body must be an io.ReadCloser&#13;
    // the bytes buffer though doesn't implement io.Closer,&#13;
    // so you wrap it in a no-op closer&#13;
    c.Request.Body = io.NopCloser(bytes.NewBuffer(jsonbytes))&#13;
}&#13;
```&#13;
```go&#13;
func TestMyHandler(t *testing.T) {&#13;
    w := httptest.NewRecorder()&#13;
    ctx, _ := gin.CreateTestContext(w) &#13;
&#13;
    ctx.Request = &amp;http.Request{&#13;
        Header: make(http.Header),&#13;
    }&#13;
&#13;
&#13;
    MockJsonPost(ctx, map[string]interface{}{'foo': 'bar'})&#13;
    &#13;
    MyHandler(ctx)&#13;
    assert.EqualValues(t, http.StatusOK, w.Code)&#13;
} &#13;
```。</description><guid isPermaLink="true">https://oaert.github.io/post/Go%20-dan-yuan-ce-shi.html</guid><pubDate>Thu, 20 Jun 2024 08:09:44 +0000</pubDate></item></channel></rss>