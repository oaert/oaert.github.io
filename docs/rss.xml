<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Oaert Page</title><link>https://oaert.github.io</link><description>Why You Try</description><copyright>Oaert Page</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://img.picui.cn/free/2024/06/20/6673d27508749.png</url><title>avatar</title><link>https://oaert.github.io</link></image><lastBuildDate>Fri, 21 Jun 2024 10:03:01 +0000</lastBuildDate><managingEditor>Oaert Page</managingEditor><ttl>60</ttl><webMaster>Oaert Page</webMaster><item><title>Go Mock Sqlmock</title><link>https://oaert.github.io/post/Go%20Mock%20Sqlmock.html</link><description>## Go mock 数据库&#13;
&#13;
#### 写TestMain初始化&#13;
```go&#13;
func TestMain(m *testing.M) {&#13;
	//把匹配器设置成相等匹配器，不设置默认使用正则匹配&#13;
	db, mock, err = sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))&#13;
	if err != nil {&#13;
		panic(err)&#13;
	}&#13;
	tool.DB, err = gorm.Open(mysql.New(mysql.Config{&#13;
		Conn:                      db,&#13;
		SkipInitializeWithVersion: true,&#13;
	}), &amp;gorm.Config{})&#13;
&#13;
	// m.Run 是调用包下面各个Test函数的入口&#13;
	os.Exit(m.Run())&#13;
}&#13;
```&#13;
#### 使用期望，查询不用begin cimmit事务，创建更新需要开始事务&#13;
```go&#13;
//示例有事务&#13;
&#13;
mock.ExpectBegin()&#13;
 mock.ExpectExec('INSERT INTO `users` (`username`,`secret`,`created_at`,`updated_at`) VALUES (?,?,?,?)').&#13;
  WithArgs(user.UserName, user.Secret, user.CreatedAt, user.UpdatedAt).&#13;
  WillReturnResult(sqlmock.NewResult(1, 1))&#13;
 mock.ExpectCommit()&#13;
&#13;
//示例无事务&#13;
&#13;
 mock.ExpectQuery('SELECT * FROM `users`  WHERE (username = ? AND secret = ?) '+&#13;
  'ORDER BY `users`.`id` ASC LIMIT 1').&#13;
  WithArgs(user.UserName, user.Secret).&#13;
  WillReturnRows(&#13;
   // 这里要跟结果集包含的列匹配，因为查询是 SELECT * 所以表的字段都要列出来&#13;
   sqlmock.NewRows([]string{'id', 'username', 'secret', 'created_at', 'updated_at'}).&#13;
    AddRow(1, user.UserName, user.Secret, user.CreatedAt, user.UpdatedAt))&#13;
```&#13;
&#13;
示例教程&#13;
[sqlmock](https://cloud.tencent.com/developer/article/2009073)&#13;
&#13;
```go&#13;
mock.ExpectExec('UPDATE products').WillReturnResult(sqlmock.NewResult(1, 1))&#13;
```&#13;
&#13;
表示执行update时返回结果1 1，一个是lastInsertID，一个是rowsAffected。</description><guid isPermaLink="true">https://oaert.github.io/post/Go%20Mock%20Sqlmock.html</guid><pubDate>Thu, 20 Jun 2024 08:13:50 +0000</pubDate></item><item><title>Go 单元测试</title><link>https://oaert.github.io/post/Go%20-dan-yuan-ce-shi.html</link><description>### go 单元测试gin框架mock请求&#13;
[mock请求学习](https://stackoverflow.com/questions/57733801/how-to-set-mock-gin-context-for-bindjson/67034058#67034058)&#13;
&#13;
#### 示例代码&#13;
```go&#13;
func MockJsonPost(c *gin.Context /* the test context */, content interface{}) {&#13;
    c.Request.Method = 'POST' // or PUT&#13;
    c.Request.Header.Set('Content-Type', 'application/json')&#13;
&#13;
    jsonbytes, err := json.Marshal(content)&#13;
    if err != nil {&#13;
        panic(err)&#13;
    }&#13;
    &#13;
    // the request body must be an io.ReadCloser&#13;
    // the bytes buffer though doesn't implement io.Closer,&#13;
    // so you wrap it in a no-op closer&#13;
    c.Request.Body = io.NopCloser(bytes.NewBuffer(jsonbytes))&#13;
}&#13;
```&#13;
```go&#13;
func TestMyHandler(t *testing.T) {&#13;
    w := httptest.NewRecorder()&#13;
    ctx, _ := gin.CreateTestContext(w) &#13;
&#13;
    ctx.Request = &amp;http.Request{&#13;
        Header: make(http.Header),&#13;
    }&#13;
&#13;
&#13;
    MockJsonPost(ctx, map[string]interface{}{'foo': 'bar'})&#13;
    &#13;
    MyHandler(ctx)&#13;
    assert.EqualValues(t, http.StatusOK, w.Code)&#13;
} &#13;
```。</description><guid isPermaLink="true">https://oaert.github.io/post/Go%20-dan-yuan-ce-shi.html</guid><pubDate>Thu, 20 Jun 2024 08:09:44 +0000</pubDate></item></channel></rss>