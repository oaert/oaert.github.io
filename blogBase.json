{"singlePage": [], "startSite": "", "filingNum": "", "onePageListNum": 15, "commentLabelColor": "#006b75", "yearColorList": ["#bc4c00", "#0969da", "#1f883d", "#A333D0"], "i18n": "CN", "themeMode": "manual", "dayTheme": "light", "nightTheme": "dark", "urlMode": "pinyin", "script": "", "style": "", "indexScript": "", "indexStyle": "", "bottomText": "", "showPostSource": 1, "iconList": {}, "UTC": 8, "rssSplit": "sentence", "exlink": {}, "needComment": 1, "title": "Oaert Page", "subTitle": "Why You Try", "avatarUrl": "https://img.picui.cn/free/2024/06/20/6673d27508749.png", "GMEEK_VERSION": "last", "postListJson": {"P1": {"htmlDir": "docs/post/Go -dan-yuan-ce-shi.html", "labels": ["documentation"], "postTitle": "Go \u5355\u5143\u6d4b\u8bd5", "postUrl": "post/Go%20-dan-yuan-ce-shi.html", "postSourceUrl": "https://github.com/oaert/oaert.github.io/issues/1", "commentNum": 0, "wordCount": 1013, "description": "### go \u5355\u5143\u6d4b\u8bd5gin\u6846\u67b6mock\u8bf7\u6c42\r\n[mock\u8bf7\u6c42\u5b66\u4e60](https://stackoverflow.com/questions/57733801/how-to-set-mock-gin-context-for-bindjson/67034058#67034058)\r\n\r\n#### \u793a\u4f8b\u4ee3\u7801\r\n```go\r\nfunc MockJsonPost(c *gin.Context /* the test context */, content interface{}) {\r\n    c.Request.Method = 'POST' // or PUT\r\n    c.Request.Header.Set('Content-Type', 'application/json')\r\n\r\n    jsonbytes, err := json.Marshal(content)\r\n    if err != nil {\r\n        panic(err)\r\n    }\r\n    \r\n    // the request body must be an io.ReadCloser\r\n    // the bytes buffer though doesn't implement io.Closer,\r\n    // so you wrap it in a no-op closer\r\n    c.Request.Body = io.NopCloser(bytes.NewBuffer(jsonbytes))\r\n}\r\n```\r\n```go\r\nfunc TestMyHandler(t *testing.T) {\r\n    w := httptest.NewRecorder()\r\n    ctx, _ := gin.CreateTestContext(w) \r\n\r\n    ctx.Request = &http.Request{\r\n        Header: make(http.Header),\r\n    }\r\n\r\n\r\n    MockJsonPost(ctx, map[string]interface{}{'foo': 'bar'})\r\n    \r\n    MyHandler(ctx)\r\n    assert.EqualValues(t, http.StatusOK, w.Code)\r\n} \r\n```\u3002", "top": 0, "createdAt": 1718870984, "style": "", "script": "", "ogImage": "https://img.picui.cn/free/2024/06/20/6673d27508749.png", "createdDate": "2024-06-20", "dateLabelColor": "#bc4c00"}, "P2": {"htmlDir": "docs/post/Go Mock Sqlmock.html", "labels": ["documentation"], "postTitle": "Go Mock Sqlmock", "postUrl": "post/Go%20Mock%20Sqlmock.html", "postSourceUrl": "https://github.com/oaert/oaert.github.io/issues/2", "commentNum": 0, "wordCount": 1795, "description": "## Go mock \u6570\u636e\u5e93\r\n\r\n#### \u5199TestMain\u521d\u59cb\u5316\r\n```go\r\nfunc TestMain(m *testing.M) {\r\n\t//\u628a\u5339\u914d\u5668\u8bbe\u7f6e\u6210\u76f8\u7b49\u5339\u914d\u5668\uff0c\u4e0d\u8bbe\u7f6e\u9ed8\u8ba4\u4f7f\u7528\u6b63\u5219\u5339\u914d\r\n\tdb, mock, err = sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\ttool.DB, err = gorm.Open(mysql.New(mysql.Config{\r\n\t\tConn:                      db,\r\n\t\tSkipInitializeWithVersion: true,\r\n\t}), &gorm.Config{})\r\n\r\n\t// m.Run \u662f\u8c03\u7528\u5305\u4e0b\u9762\u5404\u4e2aTest\u51fd\u6570\u7684\u5165\u53e3\r\n\tos.Exit(m.Run())\r\n}\r\n```\r\n#### \u4f7f\u7528\u671f\u671b\uff0c\u67e5\u8be2\u4e0d\u7528begin cimmit\u4e8b\u52a1\uff0c\u521b\u5efa\u66f4\u65b0\u9700\u8981\u5f00\u59cb\u4e8b\u52a1\r\n```go\r\n//\u793a\u4f8b\u6709\u4e8b\u52a1\r\n\r\nmock.ExpectBegin()\r\n mock.ExpectExec('INSERT INTO `users` (`username`,`secret`,`created_at`,`updated_at`) VALUES (?,?,?,?)').\r\n  WithArgs(user.UserName, user.Secret, user.CreatedAt, user.UpdatedAt).\r\n  WillReturnResult(sqlmock.NewResult(1, 1))\r\n mock.ExpectCommit()\r\n\r\n//\u793a\u4f8b\u65e0\u4e8b\u52a1\r\n\r\n mock.ExpectQuery('SELECT * FROM `users`  WHERE (username = ? AND secret = ?) '+\r\n  'ORDER BY `users`.`id` ASC LIMIT 1').\r\n  WithArgs(user.UserName, user.Secret).\r\n  WillReturnRows(\r\n   // \u8fd9\u91cc\u8981\u8ddf\u7ed3\u679c\u96c6\u5305\u542b\u7684\u5217\u5339\u914d\uff0c\u56e0\u4e3a\u67e5\u8be2\u662f SELECT * \u6240\u4ee5\u8868\u7684\u5b57\u6bb5\u90fd\u8981\u5217\u51fa\u6765\r\n   sqlmock.NewRows([]string{'id', 'username', 'secret', 'created_at', 'updated_at'}).\r\n    AddRow(1, user.UserName, user.Secret, user.CreatedAt, user.UpdatedAt))\r\n```\r\n\r\n\u793a\u4f8b\u6559\u7a0b\r\n[sqlmock](https://cloud.tencent.com/developer/article/2009073)\r\n\r\n```go\r\nmock.ExpectExec('UPDATE products').WillReturnResult(sqlmock.NewResult(1, 1))\r\n```\r\n\r\n\u8868\u793a\u6267\u884cupdate\u65f6\u8fd4\u56de\u7ed3\u679c1 1\uff0c\u4e00\u4e2a\u662flastInsertID\uff0c\u4e00\u4e2a\u662frowsAffected\u3002", "top": 0, "createdAt": 1718871230, "style": "", "script": "", "ogImage": "https://img.picui.cn/free/2024/06/20/6673d27508749.png", "createdDate": "2024-06-20", "dateLabelColor": "#bc4c00"}, "P3": {"htmlDir": "docs/post/Ubuntu Update Kernel.html", "labels": ["documentation"], "postTitle": "Ubuntu Update Kernel", "postUrl": "post/Ubuntu%20Update%20Kernel.html", "postSourceUrl": "https://github.com/oaert/oaert.github.io/issues/3", "commentNum": 0, "wordCount": 403, "description": "# \u5b89\u88c5\u5347\u7ea7\u811a\u672c\r\n```shell\r\napt install wget\r\nwget https://raw.githubusercontent.com/pimlie/ubuntu-mainline-kernel.sh/master/ubuntu-mainline-kernel.sh\r\nchmod +x ubuntu-mainline-kernel.sh\r\nsudo mv ubuntu-mainline-kernel.sh /usr/local/bin/\r\n```\r\n\r\n# \u5b89\u88c5\u6307\u5b9a\u5185\u6838\r\n```shell\r\nsudo ubuntu-mainline-kernel.sh -i v6.1.0\r\n# \u5b89\u88c5\u6307\u5b9a\u7248\u672c\uff1asudo ubuntu-mainline-kernel.sh -i \u5185\u6838\u7248\u672c\u53f7\r\n```\r\n\r\n# \u68c0\u67e5\u5185\u6838\u7248\u672c\r\n``` shell\r\nreboot\r\n\r\nuname -a\r\n\r\n```\u3002", "top": 0, "createdAt": 1721025981, "style": "", "script": "", "ogImage": "https://img.picui.cn/free/2024/06/20/6673d27508749.png", "createdDate": "2024-07-15", "dateLabelColor": "#bc4c00"}}, "singeListJson": {}, "labelColorDict": {"bug": "#d73a4a", "documentation": "#0075ca", "duplicate": "#cfd3d7", "enhancement": "#a2eeef", "good first issue": "#7057ff", "help wanted": "#008672", "invalid": "#e4e669", "question": "#d876e3", "wontfix": "#ffffff"}, "displayTitle": "Oaert Page", "faviconUrl": "https://img.picui.cn/free/2024/06/20/6673d27508749.png", "ogImage": "https://img.picui.cn/free/2024/06/20/6673d27508749.png", "primerCSS": "<link href='https://mirrors.sustech.edu.cn/cdnjs/ajax/libs/Primer/21.0.7/primer.css' rel='stylesheet' />", "homeUrl": "https://oaert.github.io", "prevUrl": "disabled", "nextUrl": "disabled"}